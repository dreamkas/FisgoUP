package com.dreamkas;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.*;

import static com.dreamkas.ConfigCreator.REG_EXP_IP;

public class MainGui extends JFrame {
    private static final int mWidth = 350;
    private static final int mHeighth = 400;
    private JButton updateDrawer;
    private JPanel MainPanel;
    private FrontEnd m_fe;
    private JTextField ipTextField;
    private JTextArea logField;
    private JButton getConfigButton;
    private JButton buttonGetClone;
    private JLabel labelInputIp;
    private JLabel labelMessageIp;
    private JProgressBar progressBar;
    private JButton connectToCashBoxButton;
    private JFormattedTextField asdFormattedTextField;
    private JFrame additionalFrame;
    private String currentOperation;
    private Vector<String> configFieldTypes;

    private static final String COMMAND_RM_BACKUP = "rm -r /updateBackup/";
    private static final String IP = "192.168.242.151";
    private static final String TITLE = "FisGoUP-1.2-BETA";

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        MainPanel = new JPanel();
        MainPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(8, 3, new Insets(0, 0, 0, 0), -1, -1));
        ipTextField = new JTextField();
        MainPanel.add(ipTextField, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        buttonGetClone = new JButton();
        buttonGetClone.setText("Копировать каталог FisGo на ПК");
        MainPanel.add(buttonGetClone, new com.intellij.uiDesigner.core.GridConstraints(5, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        updateDrawer = new JButton();
        updateDrawer.setText("Обновить кассу");
        MainPanel.add(updateDrawer, new com.intellij.uiDesigner.core.GridConstraints(3, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        getConfigButton = new JButton();
        getConfigButton.setText("Загрузить конфиг");
        MainPanel.add(getConfigButton, new com.intellij.uiDesigner.core.GridConstraints(4, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        logField = new JTextArea();
        MainPanel.add(logField, new com.intellij.uiDesigner.core.GridConstraints(7, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, 50), null, 0, false));
        labelInputIp = new JLabel();
        labelInputIp.setText("Введите IP ");
        MainPanel.add(labelInputIp, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer1 = new com.intellij.uiDesigner.core.Spacer();
        MainPanel.add(spacer1, new com.intellij.uiDesigner.core.GridConstraints(1, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer2 = new com.intellij.uiDesigner.core.Spacer();
        MainPanel.add(spacer2, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        labelMessageIp = new JLabel();
        labelMessageIp.setText("");
        MainPanel.add(labelMessageIp, new com.intellij.uiDesigner.core.GridConstraints(2, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        progressBar = new JProgressBar();
        MainPanel.add(progressBar, new com.intellij.uiDesigner.core.GridConstraints(6, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return MainPanel;
    }

    public class ConnectToCashBoxListener implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            Ssh ssh = new Ssh();
            ssh.setIp(IP);

            ssh.executeSshCommand(COMMAND_RM_BACKUP);
        }
    }

    //обработчик нажатия кнопки левой
    public class LeftButtonListener implements ActionListener {
        public void actionPerformed(ActionEvent e) {
            logField.setText("");
            System.out.println(ipTextField.getText());
            m_fe.updateDrawer(ipTextField.getText());


            updateDrawer.setEnabled(false);
            getConfigButton.setEnabled(false);
        }

    }

    //слушатель кнопки загрузки конфига с кассы
    public class DownloadConfigListener implements ActionListener {

        public void actionPerformed(ActionEvent e) {
            logField.setText("");
            System.out.println(ipTextField.getText());
            m_fe.downloadConfig(ipTextField.getText());

            progressBar.setIndeterminate(true);
            progressBar.setVisible(true);

            getConfigButton.setEnabled(false);
            updateDrawer.setEnabled(false);
        }
    }

    //обработчик нажатия кнопки клонирования кассы
    public class CloneDrawerListener implements ActionListener {

        public void actionPerformed(ActionEvent e) {
            logField.setText("");
            System.out.println(ipTextField.getText());
            m_fe.cloneDrawer(ipTextField.getText());


            updateDrawer.setEnabled(false);
            getConfigButton.setEnabled(false);
        }
    }

    public void drawConfigPanel(ArrayList<ArrayList<String>> config) {
        ConfigFieldsBuilder configFieldsBuilder = new ConfigFieldsBuilder();
        JFrame configCreator = new ConfigCreator(configFieldsBuilder.filterConfigFields(config), m_fe, ipTextField.getText());

        configCreator.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        configCreator.setBounds(30, 50, 850, 600);
        configCreator.setLocationRelativeTo(null);
        configCreator.setVisible(true);
    }

    //сброс гуевых юнитов в дефолтное состояние
    public void resetGui(String msg) {
        if (msg.equals("Success")) {
            if (currentOperation.equals("Saving config")) {
                getConfigButton.setEnabled(true);
                currentOperation = "";

                updateDrawer.setEnabled(true);
                System.out.println("GUI: ОПЕРАЦИЯ УСПЕШНО ЗАВЕРШЕНА!!!");
                printLogString("GUI: ОПЕРАЦИЯ УСПЕШНО ЗАВЕРШЕНА!!!\n");
                progressBar.setIndeterminate(false);
                progressBar.setVisible(false);
                return;
            }
        } else {
            getConfigButton.setEnabled(true);
            progressBar.setIndeterminate(false);
            progressBar.setVisible(false);
            currentOperation = "";
        }

        // updateDrawer.setEnabled(true);

        if (msg.equals("Success")) {
            System.out.println("GUI: ОПЕРАЦИЯ УСПЕШНО ЗАВЕРШЕНА!!!");
            printLogString("GUI: ОПЕРАЦИЯ УСПЕШНО ЗАВЕРШЕНА!!!\n");
            progressBar.setIndeterminate(false);
        } else if (msg.equals("Failed")) {
            System.out.println("GUI: ОПЕРАЦИЯ ПРОВАЛЕНА!!!");
            printLogString("GUI: ОПЕРАЦИЯ ПРОВАЛЕНА!!!\n");
            progressBar.setIndeterminate(false);
        }
    }


    public MainGui() {
        setTitle(TITLE);
        setContentPane(MainPanel);
        setSize(mWidth, mHeighth);
        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        currentOperation = "";

        LeftButtonListener buttonLeft = new LeftButtonListener();
        updateDrawer.addActionListener(buttonLeft);

        DownloadConfigListener buttonDownloadConfig = new DownloadConfigListener();
        getConfigButton.addActionListener(buttonDownloadConfig);

        CloneDrawerListener buttonCloneDrawerListener = new CloneDrawerListener();
        buttonGetClone.addActionListener(buttonCloneDrawerListener);

        progressBar.setVisible(false);

        updateDrawer.setEnabled(false);
        logField.setEditable(false);

        validateIp();
        ipTextField.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent e) {
                validateIp();
            }
        });

    }

    private void validateIp() {
        if (!ConfigCreator.regExpCheck(ipTextField.getText(), REG_EXP_IP)) {
            getConfigButton.setEnabled(false);
            updateDrawer.setEnabled(false);
            buttonGetClone.setEnabled(false);
        } else {
            getConfigButton.setEnabled(true);
            //updateDrawer.setEnabled(true);
            buttonGetClone.setEnabled(true);
        }
    }

    //установить ссылку на frontEnd
    public void setFrontEnd(FrontEnd fe) {
        this.m_fe = fe;
    }

    //напечатать строку лога
    public void printLogString(String logString) {
        logField.append(logString);
    }
}
